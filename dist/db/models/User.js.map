{"version":3,"sources":["../../../src/db/models/User.js"],"names":["Schema","mongoose","User","email","String","password","username","endpoints","url","type","name","isActive","Boolean","createdAt","Date","default","now","updatedAt","social","google","id","accessToken","github","encryptPassword","crypto","createHmac","config","sha256Secret","update","digest","statics","localSignup","user","save","socialSignup","provider","socialId","existUser","findByEmail","exustUser","findBySocialId","findOne","exec","methods","verifyPassword","model"],"mappings":"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","file":"User.js","sourcesContent":["import mongoose from 'mongoose';\nimport crypto from 'crypto';\nimport config from 'config';\nconst { Schema } = mongoose;\n\nconst User = new Schema({\n    email: String,\n    password: String,\n    username: String,\n    endpoints: [\n        {\n            url: { type : String },\n            name : { type: String },\n            isActive : { type : Boolean }\n        }    \n    ],\n    createdAt: {\n        type: Date,\n        default : Date.now\n    },\n    updatedAt: {\n        type: Date,\n        default: Date.now    \n    },\n    social: {\n        google: {\n            id: String,\n            accessToken: String    \n        },\n        github: {\n            id: String,\n            accessToken: String \n        }\n    }\n});\n\nconst encryptPassword = password => {\n    return crypto.createHmac('sha256', config.sha256Secret).update(password).digest('hex');\n};\n\nUser.statics.localSignup = function({\n    email, \n    password,\n    username\n}) {\n    let user = new this({\n        email,\n        password: encryptPassword(password),\n        username\n    });\n    \n    return user.save();\n};\n\nUser.statics.socialSignup = function({\n    email,\n    provider,\n    accessToken,\n    username,\n    socialId\n}) {\n\n    let existUser = this.findByEmail(email);\n\n    if(!exustUser) {\n        existUser = new this({\n            email,\n            username,\n            social: {\n                [provider]: {\n                    id: socialId,\n                    accessToken: accessToken\n                }\n            }\n        });\n    } else {\n        existUser.update({\n            social: {\n                [provider]: {\n                    id: socialId,\n                    accessToken: accessToken\n                }\n            }\n        })\n    }\n\n    return user.save();\n}\n\nUser.statics.findBySocialId = function({\n    provider,\n    id\n}) {\n    return this.findOne({ [`social.${provider}.id`]: id }).exec();\n}\n\n\nUser.statics.findByEmail = function(email) {\n    return this.findOne({email}).exec();\n};\n\nUser.methods.verifyPassword = function(password) {\n    return this.password == encryptPassword(password);\n};\n\n\nexport default mongoose.model('User', User);"]}